MySQL test
1) Write a query to rank order the following table in MySQL by votes, display the rank as one of the columns.
CREATE TABLE votes ( name CHAR(10), votes INT );
INSERT INTO votes VALUES
('Smith',10), ('Jones',15), ('White',20), ('Black',40), ('Green',50), ('Brown',20);

SELECT 0 INTO @r;
SELECT (@r:=@r+1) AS rank,votes FROM votes ORDER BY votes DESC;

2) Write a function to capitalize the first letter of a word in a given string;
Example: initcap(UNITED states Of AmERIca ) = United States Of America

DELIMITER ||  
  
CREATE FUNCTION `initcap`( str VARCHAR(128) ) RETURNS varchar(128) CHARSET latin1  
BEGIN  
  DECLARE c CHAR(1);  
  DECLARE s VARCHAR(128);  
  DECLARE i INT DEFAULT 1;  
  DECLARE bool INT DEFAULT 1;  
  DECLARE punct CHAR(17) DEFAULT ' ()[]{},.-_!@;:?/';  
  SET s = LCASE( str );  
  WHILE i < LENGTH( str ) DO  
     BEGIN  
       SET c = SUBSTRING( s, i, 1 );  
       IF LOCATE( c, punct ) > 0 THEN  
        SET bool = 1;  
      ELSEIF bool=1 THEN  
        BEGIN  
          IF c >= 'a' AND c <= 'z' THEN  
             BEGIN  
               SET s = CONCAT(LEFT(s,i-1),UCASE(c),SUBSTRING(s,i+1));  
               SET bool = 0;  
             END;  
           ELSEIF c >= '0' AND c <= '9' THEN  
            SET bool = 0;  
          END IF;  
        END;  
      END IF;  
      SET i = i+1;  
    END;  
  END WHILE;  
  RETURN s;  
END ||  
  
DELIMITER ;  


select initcap('UNITED states Of AmERIca')

3) Write a procedure in MySQL to split a column into rows using a delimiter.
CREATE TABLE sometbl ( ID INT, NAME VARCHAR(50) );
INSERT INTO sometbl VALUES (1, 'Smith'), (2, 'Julio|Jones|Falcons'), (3, 'White|Snow'), (4, 'Paint|It|Red'), (5, 'Green|Lantern'), (6, 'Brown|bag');
For (2), example rows would look like >> “3, white”, “3, Snow” …


DELIMITER $$

DROP PROCEDURE IF EXISTS explode_table $$
CREATE PROCEDURE explode_table(bound VARCHAR(255))

  BEGIN

    DECLARE id INT DEFAULT 0;
    DECLARE value TEXT;
    DECLARE occurance INT DEFAULT 0;
    DECLARE i INT DEFAULT 0;
    DECLARE splitted_value VARCHAR(255);
    DECLARE done INT DEFAULT 0;
    DECLARE cur1 CURSOR FOR SELECT sometbl.id, sometbl.name
                                         FROM sometbl
                                         WHERE sometbl.id != '';
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    DROP TEMPORARY TABLE IF EXISTS table2;
    CREATE TEMPORARY TABLE table2(
    `id` VARCHAR(255) NULL,
    `value` VARCHAR(255) NOT NULL
    ) ENGINE=Memory;

    OPEN cur1;
      read_loop: LOOP
        FETCH cur1 INTO id, value;
        IF done THEN
          LEAVE read_loop;
        END IF;

        SET occurance = (SELECT LENGTH(value)
                                 - LENGTH(REPLACE(value, bound, ''))
                                 +1);
        SET i=1;
        WHILE i <= occurance DO
          SET splitted_value =
          (SELECT REPLACE(SUBSTRING(SUBSTRING_INDEX(value, bound, i),
          LENGTH(SUBSTRING_INDEX(value, bound, i - 1)) + 1), bound, ''));

          INSERT INTO table2 VALUES (id, splitted_value);
          SET i = i + 1;

        END WHILE;
      END LOOP;

      SELECT * FROM table2;
    CLOSE cur1;
  END; $$  
CALL explode_table('|');

4) I have a table for bugs from a bug tracking software; let’s call the table “bugs”. The table has four 
columns (id, open_date, close_date, severity). On any given day a bug is open if the open_date is on or before 
that day and close_date is after that day. For example, a bug is open on “2012-01-01”, if it’s created on or before “2012-01-01” 
and closed on or after “2012-01-02”. I want an SQL to show the number of bugs open each day for a range of dates. 
Hint: There are bugs that were never closed.

create table bugs(id INT, open_date DATE, close_date DATE, severity char);
insert into bugs values(1,STR_TO_DATE('01/01/2012', '%m/%d/%Y'),STR_TO_DATE('02/01/2012', '%m/%d/%Y'),'H');
insert into bugs values(2,STR_TO_DATE('02/01/2012', '%m/%d/%Y'),STR_TO_DATE('03/01/2012', '%m/%d/%Y'),'M');
insert into bugs values(3,STR_TO_DATE('02/01/2012', '%m/%d/%Y'),STR_TO_DATE('03/01/2012', '%m/%d/%Y'),'M');
insert into bugs values(4,STR_TO_DATE('04/01/2012', '%m/%d/%Y'),null,'L');
insert into bugs values(5,STR_TO_DATE('06/01/2012', '%m/%d/%Y'),null,'L');


select b.open_date,count(b.id) as totalbugs from bugs b where b.open_date between '01/01/2012' and curdate()
group by b.open_date
order by b.open_date